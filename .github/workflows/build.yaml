name: Build and Deploy
on:
  push:
    branches: [main]
    # Publish semver tags as releases.
    tags: ["v*.*.*"]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  build:
    name: build ${{ matrix.services.appName }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        services:
          [
            { "repositoryName": "producer", "directory": "./Sample.Producer", "appName" : "producer-containerapp" },
            { "repositoryName": "consumer", "directory": "./Sample.Consumer", "appName" : "consumer-containerapp" },
          ]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Azure login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Log into acr registry
        if: github.event_name != 'pull_request'
        run: |
          az acr login -n ${{ secrets.ACR_REGISTRY }}

      - name: Output image tag
        id: image-tag
        run: echo "::set-output name=tag::${{ secrets.ACR_REGISTRY }}/${{ matrix.services.repositoryName }}:${{ github.run_id }}"

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.image-tag.outputs.tag }},${{ secrets.ACR_REGISTRY }}/${{ matrix.services.repositoryName }}:latest
          file: ${{ matrix.services.directory }}/Dockerfile

      - name: Deploy azure container app
        run: |
          echo "Installing containerapp extension"
          az extension add --source https://workerappscliextension.blob.core.windows.net/azure-cli-extension/containerapp-0.2.0-py2.py3-none-any.whl --yes
          echo "Update extension"
          az extension update -n containerapp 
          echo "Starting Deploying"
          az containerapp update -n velidabookstoreapi -g todocontainerapp-rg -i ${{ steps.image-tag.outputs.tag }} --debug
