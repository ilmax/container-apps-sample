name: Build and Deploy
on:
  push:
    branches: [main]
    # Publish semver tags as releases.
    tags: ["v*.*.*"]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  build:
    name: build ${{ matrix.services.appName }}
    runs-on: ubuntu-latest
    services:
      health-invoker:
        image: gcr.io/${{ github.repository }}/health-invoker
        ports:
          - 5000:80
        env:
          AZURE_TENANT_ID: ${{ secrets.AZURE_CREDENTIALS.tenantId }}
          AZURE_CLIENT_ID:  ${{ secrets.AZURE_CREDENTIALS.clientId }}
          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CREDENTIALS.clientSecret }}
    env:
      WARMUP_APP: http://health-invoker:5000
    strategy:
      matrix:
        services:
          [
            {
              "repositoryName": "producer",
              "directory": "./Sample.Producer",
              "appName": "producer-containerapp",
              "rgName": "azure-container-app-test",
              "zeroDowntime": true,
            },
            {
              "repositoryName": "consumer",
              "directory": "./Sample.Consumer",
              "appName": "consumer-containerapp",
              "rgName": "azure-container-app-test",
              "zeroDowntime": false,
            },
          ]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Azure login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Log into acr registry
        if: github.event_name != 'pull_request'
        run: |
          az acr login -n ${{ secrets.ACR_REGISTRY }}

      - name: Output image tag
        id: image-tag
        run: echo "::set-output name=tag::${{ secrets.ACR_REGISTRY }}/${{ matrix.services.repositoryName }}:${{ github.run_id }}"

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        if: github.event_name != 'pull_request'
        uses: docker/build-push-action@v3
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.image-tag.outputs.tag }},${{ secrets.ACR_REGISTRY }}/${{ matrix.services.repositoryName }}:latest
          file: ${{ matrix.services.directory }}/Dockerfile

      - name: Deploy azure container app with downtime
        if: github.event_name != 'pull_request' && matrix.services.zeroDowntime == false
        run: |
          echo "Installing containerapp extension"
          az extension add --name containerapp --upgrade
          echo "Create new revision"
          az containerapp update -n ${{ matrix.services.appName }} -g ${{ matrix.services.rgName }} -i ${{ steps.image-tag.outputs.tag }}

      - name: Deploy azure container app without downtime
        if: github.event_name != 'pull_request' && matrix.services.zeroDowntime == true
        run: |
          echo "Installing containerapp extension"
          az extension add --name containerapp --upgrade &> /dev/null
          echo "Get latest active revision name"
          latest_revision=$(az containerapp show -n ${{ matrix.services.appName }} -g ${{ matrix.services.rgName }} --query properties.latestRevisionName -o tsv)
          echo "Set multiple revision mode"
          az containerapp revision set-mode -n ${{ matrix.services.appName }} -g ${{ matrix.services.rgName }} --mode multiple &> /dev/null
          echo "Redirect traffic to active revision $latest_revision"
          az containerapp ingress traffic set -n ${{ matrix.services.appName }} -g ${{ matrix.services.rgName }} --revision-weight $latest_revision=100
          echo "Create new revision"
          az containerapp update -n ${{ matrix.services.appName }} -g ${{ matrix.services.rgName }} -i ${{ steps.image-tag.outputs.tag }} &> /dev/null
          echo "Warmup new revision at ${{ env.WARMUP_APP }}/warmup/${{ matrix.services.appName }}"
          health_response_status=$(curl -m 180 --write-out "%{http_code}\n" -s ${{ env.WARMUP_APP }}/warmup/${{ matrix.services.appName }} --output backend.txt)
          if [ $health_response_status = "200" ]; then
            echo "Redirect traffic to new revision"
            az containerapp ingress traffic set -n ${{ matrix.services.appName }} -g ${{ matrix.services.rgName }} --revision-weight latest=100 &> /dev/null
            echo "Set single revision mode"
            az containerapp revision set-mode -n ${{ matrix.services.appName }} -g ${{ matrix.services.rgName }} --mode single &> /dev/null
          else
            echo "Warmup failed with status code $health_response_status"
            cat ./backend.txt
            echo "Reset single revision mode"
            az containerapp revision set-mode -n ${{ matrix.services.appName }} -g ${{ matrix.services.rgName }} --mode single
            exit 1
          fi
